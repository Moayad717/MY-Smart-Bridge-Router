#!/bin/sh

# Print HTTP headers
echo "Content-type: application/json"
echo "Access-Control-Allow-Origin: *"
echo "Access-Control-Allow-Methods: GET, POST, OPTIONS"
echo "Access-Control-Allow-Headers: Content-Type"
echo ""

# Parse query string
eval $(echo "$QUERY_STRING" | tr '&' '\n' | sed 's/\([^=]*\)=\([^=]*\)/\1="\2"/')

# Function to validate MAC address
validate_mac() {
    echo "$1" | grep -Eq '^([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}$'
    return $?
}

# Function to validate time format (HH:MM:SS)
validate_time() {
    echo "$1" | grep -Eq '^([0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]$'
    return $?
}

case "$action" in
    "block")
        if [ -z "$mac" ] || [ -z "$start_time" ] || [ -z "$end_time" ]; then
            echo '{"error": "Missing required parameters"}'
            exit 1
        fi

        # Validate MAC
        if ! validate_mac "$mac"; then
            echo '{"error": "Invalid MAC address format"}'
            exit 1
        fi

        # Validate times
        if ! validate_time "$start_time" || ! validate_time "$end_time"; then
            echo '{"error": "Invalid time format. Use HH:MM:SS"}'
            exit 1
        fi

        # Create rule name based on MAC address
        rule_name="Time_Restrict_${mac//:/:}"

        # Remove any existing rules for this MAC
        existing_rules=$(uci show firewall | grep "name='$rule_name'" | cut -d. -f2)
        if [ -n "$existing_rules" ]; then
            for rule in $existing_rules; do
                uci delete firewall.$rule
            done
        fi

        # Add new rule
        uci add firewall rule
        uci set firewall.@rule[-1].name="$rule_name"
        uci set firewall.@rule[-1].src='lan'
        uci set firewall.@rule[-1].dest='*'
        uci set firewall.@rule[-1].proto='all'
        uci set firewall.@rule[-1].src_mac="$mac"
        uci set firewall.@rule[-1].target='REJECT'
        uci set firewall.@rule[-1].start_time="$start_time"
        uci set firewall.@rule[-1].stop_time="$end_time"
        uci set firewall.@rule[-1].enabled='1'

        # Commit changes and reload firewall
        uci commit firewall
        /etc/init.d/firewall reload

        echo '{"status": "success", "message": "Internet access blocked for MAC: '"$mac"' from '"$start_time"' to '"$end_time"'"}'
        ;;

    "unblock")
        if [ -z "$mac" ]; then
            echo '{"error": "MAC address required"}'
            exit 1
        fi

        # Validate MAC
        if ! validate_mac "$mac"; then
            echo '{"error": "Invalid MAC address format"}'
            exit 1
        fi

        # Remove rules for this MAC
        rule_name="Time_Restrict_${mac//:/:}"
        existing_rules=$(uci show firewall | grep "name='$rule_name'" | cut -d. -f2)
        if [ -n "$existing_rules" ]; then
            for rule in $existing_rules; do
                uci delete firewall.$rule
            done
            # Commit changes and reload firewall
            uci commit firewall
            /etc/init.d/firewall reload
        fi

        echo '{"status": "success", "message": "Internet access restored for MAC: '"$mac"'"}'
        ;;


    *)
        echo '{"error": "Invalid action"}'
        exit 1
        ;;
esac