#!/bin/sh

# CGI header
echo "Content-type: text/html"
echo ""

# HTML header
echo "<!DOCTYPE html>"
echo "<html>"
echo "<head><title>Custom Domain Filter</title></head>"
echo "<body>"

# Configuration
HOSTS_FILE="/etc/custom_filters.hosts"
FIREWALL_PREFIX="custom-filter"

# Process CGI parameters
eval $(echo "$QUERY_STRING" | sed -e 's/&/;/g')

# Function to initialize the filtering system
init_filter_system() {
    touch "$HOSTS_FILE"
    /etc/init.d/firewall restart
    echo "<p>Custom filter system initialized</p>"
}

# Function to list all custom filter rules
list_rules() {
    echo "<h2>Custom Filter Rules:</h2>"
    if [ -s "$HOSTS_FILE" ]; then
        echo "<pre>"
        cat "$HOSTS_FILE" | sort
        echo "</pre>"
    else
        echo "<p>No rules found</p>"
    fi
}

# Function to add a new filter rule with time restrictions
add_rule() {
    local rule_name="$1"
    local domain="$2"
    local action="$3"
    local src_mac="$4"
    local start_time="$5"
    local end_time="$6"

    if [ -z "$rule_name" ] || [ -z "$domain" ] || [ -z "$action" ]; then
        echo "<p>Error: Missing parameters</p>"
        echo "<p>Usage: ?cmd=add&rule_name=NAME&domain=DOMAIN&action=ACTION[&src_mac=MAC&start=HH:MM&end=HH:MM]</p>"
        return 1
    fi

    if grep -q "^$rule_name " "$HOSTS_FILE"; then
        echo "<p>Error: Rule '$rule_name' already exists</p>"
        return 1
    fi

    local ip=$(nslookup "$domain" | grep -A1 'Name:' | grep 'Address:' | tail -n1 | awk '{print $2}')
    if [ -z "$ip" ]; then
        echo "<p>Error: Could not resolve domain '$domain'</p>"
        return 1
    fi

    echo "$rule_name $domain $ip $action $src_mac $start_time $end_time" >> "$HOSTS_FILE"

    local rule_section=$(uci add firewall rule)
    uci set firewall.@rule[-1].name="$rule_name"
    uci set firewall.@rule[-1].src="lan"
    uci set firewall.@rule[-1].dest="wan"
    uci set firewall.@rule[-1].proto="all"
    uci set firewall.@rule[-1].dest_ip="$ip"

    if [ -n "$src_mac" ]; then
        uci set firewall.@rule[-1].src_mac="$src_mac"
    fi

    if [ "$action" = "block" ]; then
        uci set firewall.@rule[-1].target="REJECT"
    elif [ "$action" = "allow" ]; then
        uci set firewall.@rule[-1].target="ACCEPT"
    fi

    # Apply time-based restrictions
    if [ -n "$start_time" ] && [ -n "$end_time" ]; then
        uci set firewall.@rule[-1].start_time="$start_time"
        uci set firewall.@rule[-1].stop_time="$end_time"
    fi

    uci commit firewall
    /etc/init.d/firewall reload
    echo "<p>Added rule: $rule_name for $domain ($ip) with time restrictions: $start_time - $end_time</p>"
    return 0
}

# Function to delete a filter rule
delete_rule() {
    local rule_name="$1"

    if [ -z "$rule_name" ]; then
        echo "<p>Error: Missing rule name</p>"
        return 1
    fi

    if ! grep -q "^$rule_name " "$HOSTS_FILE"; then
        echo "<p>Error: Rule '$rule_name' not found</p>"
        return 1
    fi

    sed -i "/^$rule_name /d" "$HOSTS_FILE"

    local rule_section=$(uci show firewall | grep "name='$rule_name'" | cut -d. -f1-2)
    if [ -n "$rule_section" ]; then
        uci delete $rule_section
        uci commit firewall
        /etc/init.d/firewall reload
        echo "<p>Deleted rule: $rule_name</p>"
    else
        echo "<p>Warning: Firewall rule not found, removed from hosts file only</p>"
    fi
    return 0
}

# Main interface
echo "<h1>Custom Domain Filter</h1>"

case "$cmd" in
    init)
        init_filter_system
        ;;
    list)
        list_rules
        ;;
    add)
        add_rule "$rule_name" "$domain" "$action" "$src_mac" "$start" "$end"
        ;;
    delete)
        delete_rule "$rule_name"
        ;;
    *)
        echo "<h2>Usage:</h2>"
        echo "<ul>"
        echo "<li>Add rule: ?cmd=add&rule_name=NAME&domain=DOMAIN&action=ACTION[&src_mac=MAC&start=HH:MM&end=HH:MM]</li>"
        echo "</ul>"
        list_rules
        ;;
esac

echo "</body>"
echo "</html>"
exit 0
